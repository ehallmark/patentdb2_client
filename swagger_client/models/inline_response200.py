# coding: utf-8

"""
    PatentDB 2.0

    API specification for PatentDB 2.0  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grant_number': 'str',
        'publication_number': 'str',
        'application_number': 'str',
        'title': 'str',
        'abstract': 'str',
        'description': 'str',
        'inventors': 'list[str]',
        'priority_date': 'date',
        'filing_date': 'date',
        'publication_date': 'date',
        'issue_date': 'date',
        'claims': 'list[object]'
    }

    attribute_map = {
        'grant_number': 'grant_number',
        'publication_number': 'publication_number',
        'application_number': 'application_number',
        'title': 'title',
        'abstract': 'abstract',
        'description': 'description',
        'inventors': 'inventors',
        'priority_date': 'priority_date',
        'filing_date': 'filing_date',
        'publication_date': 'publication_date',
        'issue_date': 'issue_date',
        'claims': 'claims'
    }

    def __init__(self, grant_number=None, publication_number=None, application_number=None, title=None, abstract=None, description=None, inventors=None, priority_date=None, filing_date=None, publication_date=None, issue_date=None, claims=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._grant_number = None
        self._publication_number = None
        self._application_number = None
        self._title = None
        self._abstract = None
        self._description = None
        self._inventors = None
        self._priority_date = None
        self._filing_date = None
        self._publication_date = None
        self._issue_date = None
        self._claims = None
        self.discriminator = None
        self.grant_number = grant_number
        self.publication_number = publication_number
        self.application_number = application_number
        self.title = title
        self.abstract = abstract
        if description is not None:
            self.description = description
        self.inventors = inventors
        self.priority_date = priority_date
        self.filing_date = filing_date
        self.publication_date = publication_date
        self.issue_date = issue_date
        if claims is not None:
            self.claims = claims

    @property
    def grant_number(self):
        """Gets the grant_number of this InlineResponse200.  # noqa: E501

        Patent grant number (sometimes called issued patent number, or just patent number)  # noqa: E501

        :return: The grant_number of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._grant_number

    @grant_number.setter
    def grant_number(self, grant_number):
        """Sets the grant_number of this InlineResponse200.

        Patent grant number (sometimes called issued patent number, or just patent number)  # noqa: E501

        :param grant_number: The grant_number of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if grant_number is None:
            raise ValueError("Invalid value for `grant_number`, must not be `None`")  # noqa: E501

        self._grant_number = grant_number

    @property
    def publication_number(self):
        """Gets the publication_number of this InlineResponse200.  # noqa: E501

        Patent publication number (sometimes called published application number)  # noqa: E501

        :return: The publication_number of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._publication_number

    @publication_number.setter
    def publication_number(self, publication_number):
        """Sets the publication_number of this InlineResponse200.

        Patent publication number (sometimes called published application number)  # noqa: E501

        :param publication_number: The publication_number of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if publication_number is None:
            raise ValueError("Invalid value for `publication_number`, must not be `None`")  # noqa: E501

        self._publication_number = publication_number

    @property
    def application_number(self):
        """Gets the application_number of this InlineResponse200.  # noqa: E501

        Patent application number (sometimes called the filing number, no slashes included)  # noqa: E501

        :return: The application_number of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._application_number

    @application_number.setter
    def application_number(self, application_number):
        """Sets the application_number of this InlineResponse200.

        Patent application number (sometimes called the filing number, no slashes included)  # noqa: E501

        :param application_number: The application_number of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if application_number is None:
            raise ValueError("Invalid value for `application_number`, must not be `None`")  # noqa: E501

        self._application_number = application_number

    @property
    def title(self):
        """Gets the title of this InlineResponse200.  # noqa: E501

        Patent invention title  # noqa: E501

        :return: The title of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse200.

        Patent invention title  # noqa: E501

        :param title: The title of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this InlineResponse200.  # noqa: E501

        Patent abstract text  # noqa: E501

        :return: The abstract of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this InlineResponse200.

        Patent abstract text  # noqa: E501

        :param abstract: The abstract of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if abstract is None:
            raise ValueError("Invalid value for `abstract`, must not be `None`")  # noqa: E501

        self._abstract = abstract

    @property
    def description(self):
        """Gets the description of this InlineResponse200.  # noqa: E501

        Patent description text  # noqa: E501

        :return: The description of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200.

        Patent description text  # noqa: E501

        :param description: The description of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def inventors(self):
        """Gets the inventors of this InlineResponse200.  # noqa: E501

        List of inventor full names  # noqa: E501

        :return: The inventors of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._inventors

    @inventors.setter
    def inventors(self, inventors):
        """Sets the inventors of this InlineResponse200.

        List of inventor full names  # noqa: E501

        :param inventors: The inventors of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        if inventors is None:
            raise ValueError("Invalid value for `inventors`, must not be `None`")  # noqa: E501

        self._inventors = inventors

    @property
    def priority_date(self):
        """Gets the priority_date of this InlineResponse200.  # noqa: E501

        Estimated priority date in YYYY-MM-DD format  # noqa: E501

        :return: The priority_date of this InlineResponse200.  # noqa: E501
        :rtype: date
        """
        return self._priority_date

    @priority_date.setter
    def priority_date(self, priority_date):
        """Sets the priority_date of this InlineResponse200.

        Estimated priority date in YYYY-MM-DD format  # noqa: E501

        :param priority_date: The priority_date of this InlineResponse200.  # noqa: E501
        :type: date
        """
        if priority_date is None:
            raise ValueError("Invalid value for `priority_date`, must not be `None`")  # noqa: E501

        self._priority_date = priority_date

    @property
    def filing_date(self):
        """Gets the filing_date of this InlineResponse200.  # noqa: E501

        Filing date in YYYY-MM-DD format  # noqa: E501

        :return: The filing_date of this InlineResponse200.  # noqa: E501
        :rtype: date
        """
        return self._filing_date

    @filing_date.setter
    def filing_date(self, filing_date):
        """Sets the filing_date of this InlineResponse200.

        Filing date in YYYY-MM-DD format  # noqa: E501

        :param filing_date: The filing_date of this InlineResponse200.  # noqa: E501
        :type: date
        """
        if filing_date is None:
            raise ValueError("Invalid value for `filing_date`, must not be `None`")  # noqa: E501

        self._filing_date = filing_date

    @property
    def publication_date(self):
        """Gets the publication_date of this InlineResponse200.  # noqa: E501

        Publication date in YYYY-MM-DD format  # noqa: E501

        :return: The publication_date of this InlineResponse200.  # noqa: E501
        :rtype: date
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this InlineResponse200.

        Publication date in YYYY-MM-DD format  # noqa: E501

        :param publication_date: The publication_date of this InlineResponse200.  # noqa: E501
        :type: date
        """
        if publication_date is None:
            raise ValueError("Invalid value for `publication_date`, must not be `None`")  # noqa: E501

        self._publication_date = publication_date

    @property
    def issue_date(self):
        """Gets the issue_date of this InlineResponse200.  # noqa: E501

        Issue date in YYYY-MM-DD format  # noqa: E501

        :return: The issue_date of this InlineResponse200.  # noqa: E501
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this InlineResponse200.

        Issue date in YYYY-MM-DD format  # noqa: E501

        :param issue_date: The issue_date of this InlineResponse200.  # noqa: E501
        :type: date
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")  # noqa: E501

        self._issue_date = issue_date

    @property
    def claims(self):
        """Gets the claims of this InlineResponse200.  # noqa: E501

        List of patent claim objects  # noqa: E501

        :return: The claims of this InlineResponse200.  # noqa: E501
        :rtype: list[object]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this InlineResponse200.

        List of patent claim objects  # noqa: E501

        :param claims: The claims of this InlineResponse200.  # noqa: E501
        :type: list[object]
        """

        self._claims = claims

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
